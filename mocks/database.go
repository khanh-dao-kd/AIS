// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	goqu "github.com/doug-martin/goqu/v9"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Begin implements goqu.SQLDatabase.
func (_m *Database) Begin() (*sql.Tx, error) {
	panic("unimplemented")
}

// BeginTx implements goqu.SQLDatabase.
func (_m *Database) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	panic("unimplemented")
}

// Delete provides a mock function with given fields: table
func (_m *Database) Delete(table interface{}) *goqu.DeleteDataset {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *goqu.DeleteDataset
	if rf, ok := ret.Get(0).(func(interface{}) *goqu.DeleteDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.DeleteDataset)
		}
	}

	return r0
}

// Dialect provides a mock function with no fields
func (_m *Database) Dialect() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dialect")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Exec provides a mock function with given fields: query, args
func (_m *Database) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *Database) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// From provides a mock function with given fields: from
func (_m *Database) From(from ...interface{}) *goqu.SelectDataset {
	var _ca []interface{}
	_ca = append(_ca, from...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for From")
	}

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(...interface{}) *goqu.SelectDataset); ok {
		r0 = rf(from...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: table
func (_m *Database) Insert(table interface{}) *goqu.InsertDataset {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *goqu.InsertDataset
	if rf, ok := ret.Get(0).(func(interface{}) *goqu.InsertDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.InsertDataset)
		}
	}

	return r0
}

// Logger provides a mock function with given fields: logger
func (_m *Database) Logger(logger goqu.Logger) {
	_m.Called(logger)
}

// Prepare provides a mock function with given fields: query
func (_m *Database) Prepare(query string) (*sql.Stmt, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.Stmt, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Stmt); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareContext provides a mock function with given fields: ctx, query
func (_m *Database) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: query, args
func (_m *Database) Query(query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *Database) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: query, args
func (_m *Database) QueryRow(query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *Database) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// ScanStruct provides a mock function with given fields: i, query, args
func (_m *Database) ScanStruct(i interface{}, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanStruct")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) (bool, error)); ok {
		return rf(i, query, args...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) bool); ok {
		r0 = rf(i, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...interface{}) error); ok {
		r1 = rf(i, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanStructContext provides a mock function with given fields: ctx, i, query, args
func (_m *Database) ScanStructContext(ctx context.Context, i interface{}, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanStructContext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) (bool, error)); ok {
		return rf(ctx, i, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) bool); ok {
		r0 = rf(ctx, i, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r1 = rf(ctx, i, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanStructs provides a mock function with given fields: i, query, args
func (_m *Database) ScanStructs(i interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanStructs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(i, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanStructsContext provides a mock function with given fields: ctx, i, query, args
func (_m *Database) ScanStructsContext(ctx context.Context, i interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanStructsContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, i, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanVal provides a mock function with given fields: i, query, args
func (_m *Database) ScanVal(i interface{}, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanVal")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) (bool, error)); ok {
		return rf(i, query, args...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) bool); ok {
		r0 = rf(i, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(interface{}, string, ...interface{}) error); ok {
		r1 = rf(i, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanValContext provides a mock function with given fields: ctx, i, query, args
func (_m *Database) ScanValContext(ctx context.Context, i interface{}, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanValContext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) (bool, error)); ok {
		return rf(ctx, i, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) bool); ok {
		r0 = rf(ctx, i, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r1 = rf(ctx, i, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanVals provides a mock function with given fields: i, query, args
func (_m *Database) ScanVals(i interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanVals")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(i, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanValsContext provides a mock function with given fields: ctx, i, query, args
func (_m *Database) ScanValsContext(ctx context.Context, i interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanValsContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, i, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: cols
func (_m *Database) Select(cols ...interface{}) *goqu.SelectDataset {
	var _ca []interface{}
	_ca = append(_ca, cols...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(...interface{}) *goqu.SelectDataset); ok {
		r0 = rf(cols...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// Trace provides a mock function with given fields: op, sqlString, args
func (_m *Database) Trace(op string, sqlString string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, op, sqlString)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Truncate provides a mock function with given fields: table
func (_m *Database) Truncate(table ...interface{}) *goqu.TruncateDataset {
	var _ca []interface{}
	_ca = append(_ca, table...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 *goqu.TruncateDataset
	if rf, ok := ret.Get(0).(func(...interface{}) *goqu.TruncateDataset); ok {
		r0 = rf(table...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.TruncateDataset)
		}
	}

	return r0
}

// Update provides a mock function with given fields: table
func (_m *Database) Update(table interface{}) *goqu.UpdateDataset {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *goqu.UpdateDataset
	if rf, ok := ret.Get(0).(func(interface{}) *goqu.UpdateDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.UpdateDataset)
		}
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
