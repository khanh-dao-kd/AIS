// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	logic "ais_service/internal/logic"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AccountLogic is an autogenerated mock type for the AccountLogic type
type AccountLogic struct {
	mock.Mock
}

// AddAisMessage provides a mock function with given fields: ctx, params
func (_m *AccountLogic) AddAisMessage(ctx context.Context, params logic.AddAisMessaggParams) (logic.AddAisMessageOutput, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AddAisMessage")
	}

	var r0 logic.AddAisMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.AddAisMessaggParams) (logic.AddAisMessageOutput, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.AddAisMessaggParams) logic.AddAisMessageOutput); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(logic.AddAisMessageOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.AddAisMessaggParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAisAccount provides a mock function with given fields: ctx, params
func (_m *AccountLogic) CreateAisAccount(ctx context.Context, params logic.CreateAisAccountParams) (logic.CreateAisAccountOutput, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateAisAccount")
	}

	var r0 logic.CreateAisAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.CreateAisAccountParams) (logic.CreateAisAccountOutput, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.CreateAisAccountParams) logic.CreateAisAccountOutput); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(logic.CreateAisAccountOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.CreateAisAccountParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAisAccountByID provides a mock function with given fields: ctx, params
func (_m *AccountLogic) GetAisAccountByID(ctx context.Context, params logic.GetAisAccountByIDParams) (logic.GetAisAccountByIDOutput, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAisAccountByID")
	}

	var r0 logic.GetAisAccountByIDOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.GetAisAccountByIDParams) (logic.GetAisAccountByIDOutput, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.GetAisAccountByIDParams) logic.GetAisAccountByIDOutput); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(logic.GetAisAccountByIDOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.GetAisAccountByIDParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAisAccount provides a mock function with given fields: ctx, params
func (_m *AccountLogic) UpdateAisAccount(ctx context.Context, params logic.UpdateAccountStatusParams) (logic.UpdateAccountStatusOutput, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAisAccount")
	}

	var r0 logic.UpdateAccountStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, logic.UpdateAccountStatusParams) (logic.UpdateAccountStatusOutput, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, logic.UpdateAccountStatusParams) logic.UpdateAccountStatusOutput); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(logic.UpdateAccountStatusOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, logic.UpdateAccountStatusParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountLogic creates a new instance of AccountLogic. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountLogic(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountLogic {
	mock := &AccountLogic{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
