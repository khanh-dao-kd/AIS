// Code generated by MockGen. DO NOT EDIT.
// Source: internal/dataaccess/database/db.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	goqu "github.com/doug-martin/goqu/v9"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDatabase) Delete(table interface{}) *goqu.DeleteDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", table)
	ret0, _ := ret[0].(*goqu.DeleteDataset)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDatabaseMockRecorder) Delete(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDatabase)(nil).Delete), table)
}

// Dialect mocks base method.
func (m *MockDatabase) Dialect() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dialect")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dialect indicates an expected call of Dialect.
func (mr *MockDatabaseMockRecorder) Dialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dialect", reflect.TypeOf((*MockDatabase)(nil).Dialect))
}

// Exec mocks base method.
func (m *MockDatabase) Exec(query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDatabaseMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDatabase)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockDatabase) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockDatabaseMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockDatabase)(nil).ExecContext), varargs...)
}

// From mocks base method.
func (m *MockDatabase) From(from ...interface{}) *goqu.SelectDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range from {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "From", varargs...)
	ret0, _ := ret[0].(*goqu.SelectDataset)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockDatabaseMockRecorder) From(from ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockDatabase)(nil).From), from...)
}

// Insert mocks base method.
func (m *MockDatabase) Insert(table interface{}) *goqu.InsertDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", table)
	ret0, _ := ret[0].(*goqu.InsertDataset)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDatabaseMockRecorder) Insert(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDatabase)(nil).Insert), table)
}

// Logger mocks base method.
func (m *MockDatabase) Logger(logger goqu.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logger", logger)
}

// Logger indicates an expected call of Logger.
func (mr *MockDatabaseMockRecorder) Logger(logger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockDatabase)(nil).Logger), logger)
}

// Prepare mocks base method.
func (m *MockDatabase) Prepare(query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockDatabaseMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDatabase)(nil).Prepare), query)
}

// PrepareContext mocks base method.
func (m *MockDatabase) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockDatabaseMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockDatabase)(nil).PrepareContext), ctx, query)
}

// Query mocks base method.
func (m *MockDatabase) Query(query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabase)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockDatabase) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockDatabaseMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockDatabase)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockDatabase) QueryRow(query string, args ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockDatabaseMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDatabase)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockDatabase) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDatabaseMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDatabase)(nil).QueryRowContext), varargs...)
}

// ScanStruct mocks base method.
func (m *MockDatabase) ScanStruct(i interface{}, query string, args ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanStruct", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanStruct indicates an expected call of ScanStruct.
func (mr *MockDatabaseMockRecorder) ScanStruct(i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStruct", reflect.TypeOf((*MockDatabase)(nil).ScanStruct), varargs...)
}

// ScanStructContext mocks base method.
func (m *MockDatabase) ScanStructContext(ctx context.Context, i interface{}, query string, args ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanStructContext", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanStructContext indicates an expected call of ScanStructContext.
func (mr *MockDatabaseMockRecorder) ScanStructContext(ctx, i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStructContext", reflect.TypeOf((*MockDatabase)(nil).ScanStructContext), varargs...)
}

// ScanStructs mocks base method.
func (m *MockDatabase) ScanStructs(i interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanStructs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStructs indicates an expected call of ScanStructs.
func (mr *MockDatabaseMockRecorder) ScanStructs(i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStructs", reflect.TypeOf((*MockDatabase)(nil).ScanStructs), varargs...)
}

// ScanStructsContext mocks base method.
func (m *MockDatabase) ScanStructsContext(ctx context.Context, i interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanStructsContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanStructsContext indicates an expected call of ScanStructsContext.
func (mr *MockDatabaseMockRecorder) ScanStructsContext(ctx, i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanStructsContext", reflect.TypeOf((*MockDatabase)(nil).ScanStructsContext), varargs...)
}

// ScanVal mocks base method.
func (m *MockDatabase) ScanVal(i interface{}, query string, args ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanVal", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanVal indicates an expected call of ScanVal.
func (mr *MockDatabaseMockRecorder) ScanVal(i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanVal", reflect.TypeOf((*MockDatabase)(nil).ScanVal), varargs...)
}

// ScanValContext mocks base method.
func (m *MockDatabase) ScanValContext(ctx context.Context, i interface{}, query string, args ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanValContext", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanValContext indicates an expected call of ScanValContext.
func (mr *MockDatabaseMockRecorder) ScanValContext(ctx, i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanValContext", reflect.TypeOf((*MockDatabase)(nil).ScanValContext), varargs...)
}

// ScanVals mocks base method.
func (m *MockDatabase) ScanVals(i interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanVals", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanVals indicates an expected call of ScanVals.
func (mr *MockDatabaseMockRecorder) ScanVals(i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanVals", reflect.TypeOf((*MockDatabase)(nil).ScanVals), varargs...)
}

// ScanValsContext mocks base method.
func (m *MockDatabase) ScanValsContext(ctx context.Context, i interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, i, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanValsContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanValsContext indicates an expected call of ScanValsContext.
func (mr *MockDatabaseMockRecorder) ScanValsContext(ctx, i, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, i, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanValsContext", reflect.TypeOf((*MockDatabase)(nil).ScanValsContext), varargs...)
}

// Select mocks base method.
func (m *MockDatabase) Select(cols ...interface{}) *goqu.SelectDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*goqu.SelectDataset)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDatabaseMockRecorder) Select(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDatabase)(nil).Select), cols...)
}

// Trace mocks base method.
func (m *MockDatabase) Trace(op, sqlString string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{op, sqlString}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Trace", varargs...)
}

// Trace indicates an expected call of Trace.
func (mr *MockDatabaseMockRecorder) Trace(op, sqlString interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{op, sqlString}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockDatabase)(nil).Trace), varargs...)
}

// Truncate mocks base method.
func (m *MockDatabase) Truncate(table ...interface{}) *goqu.TruncateDataset {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range table {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Truncate", varargs...)
	ret0, _ := ret[0].(*goqu.TruncateDataset)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockDatabaseMockRecorder) Truncate(table ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockDatabase)(nil).Truncate), table...)
}

// Update mocks base method.
func (m *MockDatabase) Update(table interface{}) *goqu.UpdateDataset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", table)
	ret0, _ := ret[0].(*goqu.UpdateDataset)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDatabaseMockRecorder) Update(table interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDatabase)(nil).Update), table)
}
