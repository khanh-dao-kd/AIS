// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	database "ais_service/internal/dataaccess/database"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AisAccountDataAccessor is an autogenerated mock type for the AisAccountDataAccessor type
type AisAccountDataAccessor struct {
	mock.Mock
}

// CreateAisAccount provides a mock function with given fields: ctx, account
func (_m *AisAccountDataAccessor) CreateAisAccount(ctx context.Context, account database.AisAccount) (uint64, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAisAccount")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AisAccount) (uint64, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.AisAccount) uint64); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.AisAccount) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAisAccountByID provides a mock function with given fields: ctx, account_id
func (_m *AisAccountDataAccessor) GetAisAccountByID(ctx context.Context, account_id uint64) (database.AisAccount, error) {
	ret := _m.Called(ctx, account_id)

	if len(ret) == 0 {
		panic("no return value specified for GetAisAccountByID")
	}

	var r0 database.AisAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (database.AisAccount, error)); ok {
		return rf(ctx, account_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) database.AisAccount); ok {
		r0 = rf(ctx, account_id)
	} else {
		r0 = ret.Get(0).(database.AisAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, account_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAisAccountByIDForUpdate provides a mock function with given fields: ctx, account_id
func (_m *AisAccountDataAccessor) GetAisAccountByIDForUpdate(ctx context.Context, account_id uint64) (database.AisAccount, error) {
	ret := _m.Called(ctx, account_id)

	if len(ret) == 0 {
		panic("no return value specified for GetAisAccountByIDForUpdate")
	}

	var r0 database.AisAccount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (database.AisAccount, error)); ok {
		return rf(ctx, account_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) database.AisAccount); ok {
		r0 = rf(ctx, account_id)
	} else {
		r0 = ret.Get(0).(database.AisAccount)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, account_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAisAccount provides a mock function with given fields: ctx, account
func (_m *AisAccountDataAccessor) UpdateAisAccount(ctx context.Context, account database.AisAccount) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAisAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AisAccount) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAisAccountDataAccessor creates a new instance of AisAccountDataAccessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAisAccountDataAccessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *AisAccountDataAccessor {
	mock := &AisAccountDataAccessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
