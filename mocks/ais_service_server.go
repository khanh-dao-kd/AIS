// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	ais_api "ais_service/internal/generated/grpc/ais_api"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AISServiceServer is an autogenerated mock type for the AISServiceServer type
type AISServiceServer struct {
	mock.Mock
}

// GetAisAccountByID provides a mock function with given fields: _a0, _a1
func (_m *AISServiceServer) GetAisAccountByID(_a0 context.Context, _a1 *ais_api.GetAccountStatusRequest) (*ais_api.GetAccountStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAisAccountByID")
	}

	var r0 *ais_api.GetAccountStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ais_api.GetAccountStatusRequest) (*ais_api.GetAccountStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ais_api.GetAccountStatusRequest) *ais_api.GetAccountStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ais_api.GetAccountStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ais_api.GetAccountStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishAisAccount provides a mock function with given fields: _a0, _a1
func (_m *AISServiceServer) PublishAisAccount(_a0 context.Context, _a1 *ais_api.PublishAisAccountRequest) (*ais_api.PublishAisAccountResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PublishAisAccount")
	}

	var r0 *ais_api.PublishAisAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ais_api.PublishAisAccountRequest) (*ais_api.PublishAisAccountResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ais_api.PublishAisAccountRequest) *ais_api.PublishAisAccountResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ais_api.PublishAisAccountResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ais_api.PublishAisAccountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAISServiceServer provides a mock function with no fields
func (_m *AISServiceServer) mustEmbedUnimplementedAISServiceServer() {
	_m.Called()
}

// NewAISServiceServer creates a new instance of AISServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAISServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AISServiceServer {
	mock := &AISServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
