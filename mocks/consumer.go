// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	consumer "ais_service/internal/dataaccess/mq/consumer"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// RegisterHandler provides a mock function with given fields: topicName, subscriptionName, handlerFunc
func (_m *Consumer) RegisterHandler(topicName string, subscriptionName string, handlerFunc consumer.HandlerFunc) error {
	ret := _m.Called(topicName, subscriptionName, handlerFunc)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, consumer.HandlerFunc) error); ok {
		r0 = rf(topicName, subscriptionName, handlerFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Consumer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
