// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"ais_service/internal/configs"
	"ais_service/internal/dataaccess"
	"ais_service/internal/dataaccess/database"
	consumer2 "ais_service/internal/dataaccess/mq/consumer"
	"ais_service/internal/handler"
	"ais_service/internal/handler/consumer"
	"ais_service/internal/handler/grpc"
	"ais_service/internal/handler/grpc/middleware"
	"ais_service/internal/handler/http"
	"ais_service/internal/logic"
	"ais_service/internal/server"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer(configFilePath configs.ConfigFilePath) (*server.StandaloneServer, func(), error) {
	aisServiceServer := grpc.NewGrpcHandler()
	config, err := configs.NewConfig(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	configsGRPC := config.GRPC
	authInterceptor := middleware.NewAuthInterceptor()
	grpcServer := grpc.NewServer(aisServiceServer, configsGRPC, authInterceptor)
	configsHTTP := config.HTTP
	httpServer := http.NewServer(configsHTTP, configsGRPC)
	configsDatabase := config.Database
	db, cleanup, err := database.InitializeAndMigrateUpDB(configsDatabase)
	if err != nil {
		return nil, nil, err
	}
	databaseDatabase := database.InitializeGoquDB(db)
	aisAccountDataAccessor := database.NewAisAccountDataAccessor(databaseDatabase)
	accountLogic := logic.NewAccountLogic(aisAccountDataAccessor)
	accountCreatedHandler := consumer.NewAccountCreatedHandler(accountLogic)
	mq := config.MQ
	consumerConsumer, err := consumer2.NewPubSubConsumer(mq)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	consumerServer := consumer.NewConsumerServer(accountCreatedHandler, consumerConsumer)
	standaloneServer := server.NewStandaloneServer(grpcServer, httpServer, consumerServer)
	return standaloneServer, func() {
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(configs.WireSet, dataaccess.WireSet, logic.WireSet, handler.WireSet, server.WireSet)
